lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
?lm
lm
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
lm1 <- lm(galton$child ~ galton$parent)
g <- g + geom_abline(intercept = coef(lm1)[1], slope = coef(lm1)[2], size = 3, colour = grey(.5))
g
?lm
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent,galton)
plot(jitter(child,4) ~ parent,galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child~parent,galton)
abline(regrline,lwd=3,col = 'red')
summary(regrline)
library(UsingR)
library(manipulate)
g <- ggplot(galton,aes(x=child)) + geom_histogram(fill="salmon",colour="black")
g
g <- ggplot(galton,aes(x=child)) + geom_histogram(fill="salmon",colour="black",binwidth = 1)
g
?geom_histogram
g <- ggplot(galton,aes(x=child)) + geom_histogram(fill="salmon",colour="black")
g
g <- ggplot(galton,aes(x=child)) + geom_histogram(fill="salmon",colour="black",binwidth = 1)
g
g<- g+geom_vline(xintercept = 68,size =3)
g
myfunc <- function(mu){}
source('C:/Tutorials/Coursera_R_Programming/Regression/myfunc.R')
source('C:/Tutorials/Coursera_R_Programming/Regression/myfunc.R')
View(myfunc)
View(myfunc)
View(myfunc)
source('C:/Tutorials/Coursera_R_Programming/Regression/myfunc.R')
myfunc
myfunc(66)
manipulate(myfunc,mu=slider(62,75,step=0.5))
manipulate(myfunc,mu=slider(62,75,step=0.5))
manipulate(myfunc(mu),mu=slider(62,75,step=0.5))
library(dplyr)
freqdata <- as.data.frame(table(galton$child,galton$parent))
freqdata
names(freqdata) <- c("child","parent","freq")
freqdata$child
freqdata$child <- as.numeric(as.character(galton$child))
freqdata$child <- as.numeric(as.character(freqdata$child))
freqdata$parent <- as.numeric(as.character(freqdata$parent))
g <- ggplot(filter(freqdata,freq>0),aes(x=parent,y=child))
g
g <- g + scale_size(range=c(2,20),guide="none")
g
g <- g+geom_point(color="grey50",aes(size= freq+20,show_guide="none"))
g
g <- ggplot(filter(freqdata,freq>0),aes(x=parent,y=child))
g <- g+geom_point(color="grey50",aes(size= freq+20,show_guide="none"))
g
g <- g + scale_size(range=c(2,20),guide="none")
g
g<- g+ geom_point(aes(color=freq))
g
g<- g+ geom_point(aes(color=freq,size=freq))
g
g <- scale_color_gradient(low="lightblue",high="white")
g
g <- ggplot(filter(freqdata,freq>0),aes(x=parent,y=child))
g <- g + scale_size(range=c(2,20),guide="none")
g <- g+geom_point(color="grey50",aes(size= freq+20,show_guide="none"))
g<- g+ geom_point(aes(color=freq,size=freq))
g <- scale_color_gradient(low="lightblue",high="white")
g
g <- ggplot(filter(freqdata,freq>0),aes(x=parent,y=child))
g <- scale_color_gradient(low="lightblue",high="white")
g <- g+geom_point(color="grey50",aes(size= freq+20,show_guide="none"))
g<- g+ geom_point(aes(color=freq,size=freq))
g
g
g <- ggplot(filter(freqdata,freq>0),aes(x=parent,y=child))
g <- g + scale_size(range=c(2,20),guide="none")
g <- g+geom_point(color="grey50",aes(size= freq+20,show_guide="none"))
g<- g+ geom_point(aes(color=freq,size=freq))
g
g<-g+ scale_color_gradient(low="lightblue",high="white")
g
x <- galton$child-mean(galton$child)
x
x <- galton$child-mean(galton$child)
y <- galton$parent - mean(galton$parent)
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
manipulate(myplot(beta),beta = slider(0.6,1.2,step = 0.02))
manipulate(myplot(beta),beta = slider(0.6,1.2,step = 0.02))
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
manipulate(myplot(beta),beta = slider(0.6,1.2,step = 0.02))
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
manipulate(myplot(beta),beta = slider(0.6,1.2,step = 0.02))
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
manipulate(myplot(beta),beta = slider(0.6,1.2,step = 0.02))
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
manipulate(myplot(beta),beta = slider(0.6,1.2,step = 0.02))
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
manipulate(myplot(beta),beta = slider(0.6,1.2,step = 0.02))
manipulate(myplot(beta),beta = slider(0.6,1.2,step = 0.02))
myplot(0.8)
myplot(1.5)
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
myplot(1.5)
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
manipulate(myplot(beta),beta = slider(0.6,1.2,step = 0.02))
galton$child
mu = mean(galton$child)
x1 <- galton$child-mu
x1
var1<-mean(x1^2)
var1
x2<-mean(galton$child^2)
x2
x3<-mean(galton$child)^2
x3
var2<- x2-x3
var2
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
y <- mean(galton$child)
y <- mean(galton$parent)
x <- mean(galton$parent)
y <- mean(galton$child)
freqdata <- as.data.frame(table(x,y))
names(freqdata) <-c("child","parent","freq")
freqdata
y <- galton$child-mean(galton$child)
x <- galton$parent -mean(galton$parent)
freqdata <- as.data.frame(table(x,y))
names(freqdata) <-c("child","parent","freq")
freqdata
freqdata$child <- as.numeric(as.character(freqdata$child))
freqdata$parent <- as.numeric(as.character(freqdata$parent))
manipulate(myplot(beta),beta = slider(0.6,1.2,step=0.02))
source('C:/Tutorials/Coursera_R_Programming/Regression/myplot.R')
manipulate(myplot(beta),beta = slider(0.6,1.2,step=0.02))
manipulate(myplot(beta),beta = slider(0.4,1.2,step=0.02))
swirl()
library(swirl)
swirl()
swirl()
library(UsingR)
fit <- lm(child~parent,galton)
fit$residuals
summary(fit)
fit$residuals$mean
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic <- fit$coefficients[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs-lsh
rhs-lhs
lhs-rhs
all.equal((lhs,rhs))
all.equal(lhs,rhs)
varChild <-var(father.son$sheight)
varChild <-var(galton$child)
varRes<- var(fit$residuals)
varEst<- var(est)
varEst<- var(est)
est
varEst<- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes+varEst)
efit<-lm(accel ~ mag+dist,attenu)
mena(efit$residuals)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x*w)
x*w
mean(w*(x-mean(x*w))^2)
mu <- mean(x*w)
mu
x-mu
(x-mu)^2
w*(x-mu)^2
sum(w*(x-mu)^2)
sum(w*(x-mean(x*w))^2)
x*w
mean(x*w)
mean(x*w)/4
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
data("mtcars")
mtcars
lm(mpg~wt)
lm(mpg~wt,mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mx <- mean(x)
(mx-x)/sd(x)
sd(x)
(x-mx)/sd(z)
(x-mx)/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x*w
mean(x*w)
mean(x*w)^2
mean(x*w)/4
x*w)
avg(x*w)
ave
ave(x*w)
w*0.2575
mean(w*0.2575)
w*x
mean(w*x)
mean(x*w,w)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x*y
sum(x*y)
sum(x*y)/sum(x^2)
library(UsingR)
data("diamonds")
diamonds
summary(diamonds)
g <- ggplot()
g <- ggplot(diamonds,aes(x=carat,y=price))
g <- g + xlab("Mass (Carats)")
g <- g + ylab("Price (US$)")
g
g <- g + geom_point(size=7,colour = "black",alpha = 0.5)
g <- g + geom_point(size=5,colour = "blue",alpha = 0.2)
g
g <- g + geom_smooth(method = "lm",colour = "black")
g <- g + geom_smooth(method = "lm",colour = "black")
g
lm(price~cart,data = diamond)
lm(price~cart,data = diamonds)
lm(price~carat,data = diamonds)
fit
fit <- lm(price~carat,data = diamonds)
fit
fit <- lm(price~(carat - mean(carat)),data = diamonds)
fit <- lm(price~ I(carat - mean(carat)),data = diamonds)
fit <- lm(price~carat,data = diamonds)
fit2 <- lm(price~ I(carat - mean(carat)),data = diamonds)
fit2
fit3 <- lm(price~ I(carat*10),data = diamonds)
fit3
newx <- c(0.16,0.27,0.34)
newx
coef(fit)
coef(fit)[1]+coef(fit)[2]*newx
p1 <- coef(fit)[1]+coef(fit)[2]*newx
p2 <- predict(fit,newdata = data.frame(carat=newx))
p2
all.equal(p1,p2)
all.equal(p1,p2)
all.equal(p2,p1)
p1==p2
data("diamond")
g <- g + geom_smooth(method = "lm",colour = "black")
g <- ggplot(diamond,aes(x=carat,y=price))
g <- g + xlab("Mass (Carats)")
g <- g + ylab("Price (US$)")
g <- g + geom_point(size=7,colour = "black",alpha = 0.5)
g <- g + geom_point(size=5,colour = "blue",alpha = 0.2)
g <- g + geom_smooth(method = "lm",colour = "black")
g
g
g
y<- diamond$price
x<- diamond$carat
fit <- lm(y~x)
e <- resid(fit)
e
predit(fit)
predict(fit)
y-yhat
yhat <- predict(fit)
y-yhat
library(swirl)
swirl()
choose(5,3)*(0.8)*3*0.2*2
myfunc <- function(x){
choose(5,x)*(0.8)^x*(0.2)^(5-x)
}
myfunc(3)
myfunc(3) + myfunc(4) + myfunc(5)
pbinom(prob = 0.8,size=5,quantile =2)
pbinom(prob = 0.8,size=5,quantile =2)
pbinom(prob = 0.8,size=5,q =  =2)
pbinom(prob = 0.8,size=5,q = 2)
pbinom(prob = 0.8,size=5,q = 2,lower.tail = F)
pbinom(prob = 0.8,size=5,q = 2,lower.tail = FALSE)
qnorm(10)
qnorm(.1)
0
pnorm(0.75,1020,50)
pnorm(0.75,mean=1020,sd=50)
pnorm(0.75,mean=1020,sd=50)
qnorm(0.75,mean=1020,sd=50)
qnorm(0.875,3,2)
qnorm(0.975,3,2)
3+2*1.96
pnorm(1200,1020,50,lower.tail = FALSE)
pnorm(1200,1020,50,lower.tail = FALSE)
pnorm((1200-1020)/50,lower.tail = FALSE)
qnorm(0.75,1020,50)
0
pnorm(qnorm(053))
pnorm(qnorm(0.53))
.53
ppois(q = 3,mean-1)
ppois(q = 3,mean=1)
ppois(lambda = 2.5*4,q)
ppois(lambda = 2.5*4,=3)
ppois(lambda = 2.5*4,3)
pbinom(q=5,size=1000,prob = 0.5)
pbinom(q=5,size=1000,prob = 0.1)
pbinom(q=5,size=1000,prob = 0.01)
ppois = q=5,lambda = 5
ppois( q=5,lambda = 5)
ppois( q=5,lambda = 5,10000)
ppois( q=5,lambda = 0.1,10000)
.
ppois(5,0.1,10000)
ppois(5,0.01,10000)
ppois(5,0.01*10000)
ppois(5,0.01*1000)
ppois(5,1000,5)
ppois(5,1000,*.01)
ppois(5,1000*.01)
coinPlot()
coinPlot
sample(0:1,100)
sample(0:1,100,replace=TRUE)
cumsum(sample(0:1,100,replace=TRUE))
cumsum(sample(0:1,100,replace=TRUE))/(1:n)
cumsum(sample(0:1,100,replace=TRUE))/(1:100)
coinPlot(10)
coinPlot(10000)
swirl
swirl()
swirl()
swirl()
qnorm(0.975)
qnorm(0.95)
0.60 + c(-1,1)*qnorm(0.975)*sqrt((0.6*0.4)/100)
.60 + c(-1,1)*qnorm(0.975)*sqrt((0.6*0.4)/100)
.6 + c(-1,1)*qnorm(0.975)*sqrt(0.6*0.4/100)
x$conf
x$conf.int
b
binom.test(60,100)
binom.test(60,100)$conf.int
mywald
mywald(0.2)
ACCompar()
ACCompar(20)
lamb <- 5/94.32
mean + c(-1,1)*qnorm(.975)*sqrt(lamb)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/t)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/t)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,T=94.32)
poisson.test(5,T=94.32)$conf
library(shiny); runApp('R/myplot1.R')
runApp('R/myplot1.R')
runApp('R/myplot1.R')
runApp('R/myplot1.R')
d <- read.csv(file = "cities_r2.csv")
dff <- separate(data = d, col = location, into = c("lat","lng"),sep = ",")
dff$name_of_city <- trimws(dff$name_of_city)
#a <- df[order(-d$population_total),]
df.city <- dff
df.state <- df.city %>%
group_by(state_name) %>%
summarize(Total = n(),
population_total = sum(population_total),
population_male = sum(population_male),
population_female = sum(population_female),
Male_Percent = population_male/population_total * 100,
Female_Percent = population_female/population_total * 100,
total_graduates = sum(total_graduates),
male_graduates = sum(male_graduates),
female_graduates = sum(female_graduates),
Grads_percent = total_graduates/population_total * 100,
Male_Grads_Percent = male_graduates/population_male * 100,
Female_Grads_Percent = female_graduates/population_female * 100,
X0.6_population_total = sum(X0.6_population_total),
X0.6_population_male = sum(X0.6_population_male),
X0.6_population_female = sum(X0.6_population_female),
literates_total = sum(literates_total),
literates_male = sum(literates_male),
literates_female = sum(literates_female),
sex_ratio = sum(sex_ratio),
child_sex_ratio = sum(child_sex_ratio),
lat = mean(as.numeric(lat)),
lng = mean(as.numeric(lng)),
effective_literacy_rate_total = sum(effective_literacy_rate_total),
effective_literacy_rate_male = sum(effective_literacy_rate_male),
effective_literacy_rate_female = sum(effective_literacy_rate_female)
)
df.city <- mutate(df.city,
Male_Percent = population_male/population_total * 100,
Female_Percent = population_female/population_total * 100,
Grads_percent = total_graduates/population_total * 100,
Male_Grads_Percent = male_graduates/population_male * 100,
Female_Grads_Percent = female_graduates/population_female * 100
)
df.city <- dff
d <- read.csv(file = "cities_r2.csv")
dff <- separate(data = d, col = location, into = c("lat","lng"),sep = ",")
dff$name_of_city <- trimws(dff$name_of_city)
setwd("~/R")
d <- read.csv(file = "cities_r2.csv")
dff <- separate(data = d, col = location, into = c("lat","lng"),sep = ",")
dff$name_of_city <- trimws(dff$name_of_city)
d <- read.csv(file = "cities_r2.csv")
dff <- separate(data = d, col = location, into = c("lat","lng"),sep = ",")
dff$name_of_city <- trimws(dff$name_of_city)
#a <- df[order(-d$population_total),]
df.city <- dff
df.state <- df.city %>%
group_by(state_name) %>%
summarize(Total = n(),
population_total = sum(population_total),
population_male = sum(population_male),
population_female = sum(population_female),
Male_Percent = population_male/population_total * 100,
Female_Percent = population_female/population_total * 100,
total_graduates = sum(total_graduates),
male_graduates = sum(male_graduates),
female_graduates = sum(female_graduates),
Grads_percent = total_graduates/population_total * 100,
Male_Grads_Percent = male_graduates/population_male * 100,
Female_Grads_Percent = female_graduates/population_female * 100,
X0.6_population_total = sum(X0.6_population_total),
X0.6_population_male = sum(X0.6_population_male),
X0.6_population_female = sum(X0.6_population_female),
literates_total = sum(literates_total),
literates_male = sum(literates_male),
literates_female = sum(literates_female),
sex_ratio = sum(sex_ratio),
child_sex_ratio = sum(child_sex_ratio),
lat = mean(as.numeric(lat)),
lng = mean(as.numeric(lng)),
effective_literacy_rate_total = sum(effective_literacy_rate_total),
effective_literacy_rate_male = sum(effective_literacy_rate_male),
effective_literacy_rate_female = sum(effective_literacy_rate_female)
)
df.city <- mutate(df.city,
Male_Percent = population_male/population_total * 100,
Female_Percent = population_female/population_total * 100,
Grads_percent = total_graduates/population_total * 100,
Male_Grads_Percent = male_graduates/population_male * 100,
Female_Grads_Percent = female_graduates/population_female * 100
)
da <- df.state %>%
arrange(desc(population_total))
dp <- da[1:5,]
runApp('myplot1.R')
runApp('myplot1.R')
runApp()
require(leaflet)
runApp()
runApp()
df <- df.state
df$name_of_city<-df$state_name
runApp()
list_select <- c("Population" = 1, "Male Population" = 2, "Female Population" = 3,
"Male Percentage" = 4, "Female Percentage" = 5, "Graduates" = 6,
"Male Graduates" = 7, "Female Graduates" = 8, "Graduates Percentage" = 9,
"Male Graduates Percentage" = 10, "Female Graduates Percentage" = 11,
"Total Literates" = 12, "Literates_Male" =13, "Literates_Female" = 14,
"Sex_Ratio" = 15, "Child_Sex_Ratio" = 16, "Effective_Literacy_Rate_total" = 17,
"Effective_Literacy_Rate_Male" = 18, "Effective_Literacy_Rate_Female" = 19)
runApp()
runApp('myplot1.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd
getwd()
setwd("~/R/App")
